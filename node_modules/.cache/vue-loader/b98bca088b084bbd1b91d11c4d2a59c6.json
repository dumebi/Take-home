{"remainingRequest":"/Applications/Node/Take-home/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/Node/Take-home/src/components/HelloWorld.vue?vue&type=style&index=0&id=3d2de470&scoped=true&lang=css&","dependencies":[{"path":"/Applications/Node/Take-home/src/components/HelloWorld.vue","mtime":1563803641573},{"path":"/Applications/Node/Take-home/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-sm-6 \">\n      <h3>Billable Hours</h3>\n      <form enctype=\"multipart/form-data\">\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Enter CSV File</label>\n        <input @change=\"onFileChange($event)\" type=\"file\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter token amount\">\n      </div>\n    </form>\n    </div>\n  </div>\n  <template v-if=\"companies.length > 0\">\n    <div v-for=\"(company, index) in companies\" :key=\"index\" :id=\"index\" class=\"row justify-content-center mb-1\">\n      <div v-if=\"show == index\" class=\"col-sm-8 \">\n        <h3 class=\"col-md-12 text-left mb-2\">Company: {{company[0]}}</h3>\n        <table>\n          <tr style=\"background-color: #dddddd\">\n            <th>Employee ID</th>\n            <th>Number of Hours</th>\n            <th>Unit Price</th>\n            <th>Cost</th>\n          </tr>\n          <tr v-for=\"(entry, entryIndex) in company[1]\" :key=\"entryIndex\">\n            <td>{{entry['Employee ID']}}</td>\n            <td>{{entry['Total Time']}}</td>\n            <td>{{entry['Billable Rate (per hour)']}}</td>\n            <td>{{entry['Cost']}}</td>\n          </tr>\n          <tr style=\"background-color: #dddddd\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n            <td>Total</td>\n            <td>{{company[2]}}</td>\n          </tr>\n        </table>\n      </div>\n    </div>\n    \n    <button style=\"margin-right: 20px;\" @click=\"show--\" v-if=\"show > 0\" type=\"button\">Previous</button>\n    <button @click=\"show++\" v-if=\"show < companies.length - 1\" type=\"button\">Next</button>\n    <button style=\"margin-left: 20px;\" @click=\"printElem(index)\" class=\"text-right\" type=\"button\">print</button>\n  </template>\n  \n</div>\n</template>\n\n<script>\n// const {createInput, groupBy} = require('../funcs')\nimport helpers from '@/funcs'\nexport default {\n  name: 'HelloWorld',\n  data: function () {\n    return {\n      fileinput: '',\n      companies: '',\n      show: 0,\n      cost: {},\n      notificationSystem: {\n        options: {\n          ballon: {\n            position: 'topRight'\n          },\n          info: {\n            position: 'topRight'\n          },\n          success: {\n            position: 'topRight'\n          },\n          warning: {\n            position: 'topRight'\n          },\n          error: {\n            position: 'topRight'\n          }\n        }\n      }\n    }\n  },\n  mounted () {\n  },\n  methods: {\n    /**\n       * Set filename of document\n       */\n      // async parseFile (event) {\n      //   const file = event.target.files[0]\n      //   console.log(file)\n      //   const parser = await parse(file)\n      //   console.log(parser)\n      // }\n      printElem(divId) {\n        var content = document.getElementById(divId).innerHTML;\n        var mywindow = window.open('', 'Print', 'height=600,width=800');\n\n        mywindow.document.write('<html><head><title>Print</title>');\n        mywindow.document.write('</head><body >');\n        mywindow.document.write(content);\n        mywindow.document.write('</body></html>');\n\n        mywindow.document.close();\n        mywindow.focus()\n        mywindow.print();\n        mywindow.close();\n        return true;\n      },\n\n      async onFileChange(e) {\n        var files = e.target.files || e.dataTransfer.files;\n        if (!files.length)\n          return;\n        let res = await helpers.parseCSV(files[0]);\n        res = JSON.parse(res)\n        \n        this.companies = helpers.groupBy(res, 'Project')\n        this.companies = Object.entries(this.companies)\n        this.companies.splice(this.companies.length - 1, 1)\n        this.companies.map((company) => {\n          let totalCost = 0\n          for (let index = 0; index < company[1].length; index++) {\n            company[1][index][\"Total Time\"] = parseInt(company[1][index]['End Time'], 10) - parseInt(company[1][index]['Start Time'], 10)\n            company[1][index][\"Cost\"] = parseInt(company[1][index][\"Total Time\"], 10) * parseInt(company[1][index]['Billable Rate (per hour)'], 10)\n            totalCost += company[1][index][\"Cost\"]\n          }\n          company[2] = totalCost\n        })\n      }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n</style>\n"]}]}