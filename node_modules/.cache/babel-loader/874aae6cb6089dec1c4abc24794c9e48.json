{"remainingRequest":"/Applications/Node/Take-home/node_modules/thread-loader/dist/cjs.js!/Applications/Node/Take-home/node_modules/babel-loader/lib/index.js!/Applications/Node/Take-home/node_modules/eslint-loader/index.js??ref--13-0!/Applications/Node/Take-home/src/funcs.js","dependencies":[{"path":"/Applications/Node/Take-home/src/funcs.js","mtime":1563804270594},{"path":"/Applications/Node/Take-home/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Applications/Node/Take-home/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport default {\n  /**\n   * Group a Javascript object by key\n   * @param {*} json \n   * @param {*} key \n   */\n  groupBy: function groupBy(object, key) {\n    return object.reduce(function (row, x) {\n      (row[x[key]] = row[x[key]] || []).push(x);\n      return row;\n    }, {});\n  },\n\n  /**\n   * Parse a CSV file to JSON\n   * @param {*} file \n   */\n  parseCSV: function () {\n    var _parseCSV = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(file) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                var reader = new FileReader();\n\n                reader.onload = function () {\n                  var csv = reader.result; // console.log(csv)\n\n                  var lines = csv.split(\"\\n\");\n                  var result = [];\n                  var headers = lines[0].split(\",\");\n\n                  for (var i = 1; i < lines.length; i++) {\n                    var obj = {};\n                    var currentline = lines[i].split(\",\");\n\n                    for (var j = 0; j < headers.length; j++) {\n                      obj[headers[j]] = currentline[j];\n                    }\n\n                    result.push(obj);\n                  }\n\n                  result = JSON.stringify(result); //JSON\n\n                  this.fileinput = result;\n                  return resolve(result);\n                };\n\n                reader.readAsText(file);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parseCSV(_x) {\n      return _parseCSV.apply(this, arguments);\n    }\n\n    return parseCSV;\n  }()\n};",{"version":3,"sources":["/Applications/Node/Take-home/src/funcs.js"],"names":["groupBy","object","key","reduce","row","x","push","parseCSV","file","Promise","resolve","reader","FileReader","onload","csv","result","lines","split","headers","i","length","obj","currentline","j","JSON","stringify","fileinput","readAsText"],"mappings":";;;AACA,eAAe;AACb;;;;;AAKAA,EAAAA,OANa,mBAMLC,MANK,EAMGC,GANH,EAMQ;AACnB,WAAOD,MAAM,CAACE,MAAP,CAAc,UAASC,GAAT,EAAcC,CAAd,EAAiB;AACpC,OAACD,GAAG,CAACC,CAAC,CAACH,GAAD,CAAF,CAAH,GAAcE,GAAG,CAACC,CAAC,CAACH,GAAD,CAAF,CAAH,IAAe,EAA9B,EAAkCI,IAAlC,CAAuCD,CAAvC;AACA,aAAOD,GAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID,GAXY;;AAab;;;;AAIMG,EAAAA,QAjBO;AAAA;AAAA;AAAA,6CAiBEC,IAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,+CAkBJ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,oBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,gBAAAA,MAAM,CAACE,MAAP,GAAgB,YAAW;AACzB,sBAAMC,GAAG,GAAGH,MAAM,CAACI,MAAnB,CADyB,CAEzB;;AACA,sBAAMC,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,IAAV,CAAd;AACA,sBAAIF,MAAM,GAAG,EAAb;AACA,sBAAMG,OAAO,GAACF,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAAd;;AACA,uBAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,KAAK,CAACI,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC7B,wBAAME,GAAG,GAAG,EAAZ;AACA,wBAAMC,WAAW,GAACN,KAAK,CAACG,CAAD,CAAL,CAASF,KAAT,CAAe,GAAf,CAAlB;;AACA,yBAAI,IAAIM,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,OAAO,CAACE,MAAtB,EAA6BG,CAAC,EAA9B,EAAiC;AAC/BF,sBAAAA,GAAG,CAACH,OAAO,CAACK,CAAD,CAAR,CAAH,GAAkBD,WAAW,CAACC,CAAD,CAA7B;AACD;;AACDR,oBAAAA,MAAM,CAACT,IAAP,CAAYe,GAAZ;AACC;;AACDN,kBAAAA,MAAM,GAAGS,IAAI,CAACC,SAAL,CAAeV,MAAf,CAAT,CAduB,CAcU;;AACjC,uBAAKW,SAAL,GAAiBX,MAAjB;AACA,yBAAOL,OAAO,CAACK,MAAD,CAAd;AACH,iBAjBD;;AAkBAJ,gBAAAA,MAAM,CAACgB,UAAP,CAAkBnB,IAAlB;AACD,eArBM,CAlBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf","sourcesContent":["\nexport default {\n  /**\n   * Group a Javascript object by key\n   * @param {*} json \n   * @param {*} key \n   */\n  groupBy(object, key) {\n    return object.reduce(function(row, x) {\n      (row[x[key]] = row[x[key]] || []).push(x);\n      return row;\n    }, {});\n  },\n\n  /**\n   * Parse a CSV file to JSON\n   * @param {*} file \n   */\n  async parseCSV(file) {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = function() {\n        const csv = reader.result;\n        // console.log(csv)\n        const lines = csv.split(\"\\n\");\n        let result = [];\n        const headers=lines[0].split(\",\");\n        for(let i=1;i<lines.length;i++){\n          const obj = {};\n          const currentline=lines[i].split(\",\");\n          for(let j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j];\n          }\n          result.push(obj);\n          }  \n          result = JSON.stringify(result); //JSON\n          this.fileinput = result;\n          return resolve(result)\n      }\n      reader.readAsText(file);          \n    })\n  }\n}"]}]}