{"remainingRequest":"/Applications/Node/Take-home/node_modules/babel-loader/lib/index.js!/Applications/Node/Take-home/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Applications/Node/Take-home/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/Node/Take-home/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Applications/Node/Take-home/src/components/HelloWorld.vue","mtime":1563803192712},{"path":"/Applications/Node/Take-home/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/Node/Take-home/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Applications/Node/Take-home/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// const {createInput, groupBy} = require('../funcs')\nimport helpers from '@/funcs';\nexport default {\n  name: 'HelloWorld',\n  data: function data() {\n    return {\n      fileinput: '',\n      companies: '',\n      show: 0,\n      cost: {},\n      notificationSystem: {\n        options: {\n          ballon: {\n            position: 'topRight'\n          },\n          info: {\n            position: 'topRight'\n          },\n          success: {\n            position: 'topRight'\n          },\n          warning: {\n            position: 'topRight'\n          },\n          error: {\n            position: 'topRight'\n          }\n        }\n      }\n    };\n  },\n  mounted: function mounted() {},\n  methods: {\n    /**\n       * Set filename of document\n       */\n    // async parseFile (event) {\n    //   const file = event.target.files[0]\n    //   console.log(file)\n    //   const parser = await parse(file)\n    //   console.log(parser)\n    // }\n    printElem: function printElem(divId) {\n      var content = document.getElementById(divId).innerHTML;\n      var mywindow = window.open('', 'Print', 'height=600,width=800');\n      mywindow.document.write('<html><head><title>Print</title>');\n      mywindow.document.write('</head><body >');\n      mywindow.document.write(content);\n      mywindow.document.write('</body></html>');\n      mywindow.document.close();\n      mywindow.focus();\n      mywindow.print();\n      mywindow.close();\n      return true;\n    },\n    onFileChange: function () {\n      var _onFileChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(e) {\n        var files, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                files = e.target.files || e.dataTransfer.files;\n\n                if (files.length) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return helpers.createInput(files[0]);\n\n              case 5:\n                res = _context.sent;\n                res = JSON.parse(res);\n                this.companies = groupBy(res, 'Project');\n                this.companies = Object.entries(this.companies);\n                this.companies.splice(this.companies.length - 1, 1);\n                this.companies.map(function (company) {\n                  var totalCost = 0;\n\n                  for (var index = 0; index < company[1].length; index++) {\n                    company[1][index][\"Total Time\"] = parseInt(company[1][index]['End Time'], 10) - parseInt(company[1][index]['Start Time'], 10);\n                    company[1][index][\"Cost\"] = parseInt(company[1][index][\"Total Time\"], 10) * parseInt(company[1][index]['Billable Rate (per hour)'], 10);\n                    totalCost += company[1][index][\"Cost\"];\n                  }\n\n                  company[2] = totalCost;\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onFileChange(_x) {\n        return _onFileChange.apply(this, arguments);\n      }\n\n      return onFileChange;\n    }()\n  }\n};",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-sm-6 \">\n      <h3>Billable Hours</h3>\n      <form enctype=\"multipart/form-data\">\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Enter CSV File</label>\n        <input @change=\"onFileChange($event)\" type=\"file\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter token amount\">\n      </div>\n    </form>\n    </div>\n  </div>\n  <template v-if=\"companies.length > 0\">\n    <div v-for=\"(company, index) in companies\" :key=\"index\" :id=\"index\" class=\"row justify-content-center mb-1\">\n      <div v-if=\"show == index\" class=\"col-sm-8 \">\n        <h3 class=\"col-md-12 text-left mb-2\">Company: {{company[0]}}</h3>\n        <table>\n          <tr style=\"background-color: #dddddd\">\n            <th>Employee ID</th>\n            <th>Number of Hours</th>\n            <th>Unit Price</th>\n            <th>Cost</th>\n          </tr>\n          <tr v-for=\"(entry, entryIndex) in company[1]\" :key=\"entryIndex\">\n            <td>{{entry['Employee ID']}}</td>\n            <td>{{entry['Total Time']}}</td>\n            <td>{{entry['Billable Rate (per hour)']}}</td>\n            <td>{{entry['Cost']}}</td>\n          </tr>\n          <tr style=\"background-color: #dddddd\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n            <td>Total</td>\n            <td>{{company[2]}}</td>\n          </tr>\n        </table>\n      </div>\n    </div>\n    \n    <button style=\"margin-right: 20px;\" @click=\"show--\" v-if=\"show > 0\" type=\"button\">Previous</button>\n    <button @click=\"show++\" v-if=\"show < companies.length - 1\" type=\"button\">Next</button>\n    <button style=\"margin-left: 20px;\" @click=\"printElem(index)\" class=\"text-right\" type=\"button\">print</button>\n  </template>\n  \n</div>\n</template>\n\n<script>\n// const {createInput, groupBy} = require('../funcs')\nimport helpers from '@/funcs'\nexport default {\n  name: 'HelloWorld',\n  data: function () {\n    return {\n      fileinput: '',\n      companies: '',\n      show: 0,\n      cost: {},\n      notificationSystem: {\n        options: {\n          ballon: {\n            position: 'topRight'\n          },\n          info: {\n            position: 'topRight'\n          },\n          success: {\n            position: 'topRight'\n          },\n          warning: {\n            position: 'topRight'\n          },\n          error: {\n            position: 'topRight'\n          }\n        }\n      }\n    }\n  },\n  mounted () {\n  },\n  methods: {\n    /**\n       * Set filename of document\n       */\n      // async parseFile (event) {\n      //   const file = event.target.files[0]\n      //   console.log(file)\n      //   const parser = await parse(file)\n      //   console.log(parser)\n      // }\n      printElem(divId) {\n        var content = document.getElementById(divId).innerHTML;\n        var mywindow = window.open('', 'Print', 'height=600,width=800');\n\n        mywindow.document.write('<html><head><title>Print</title>');\n        mywindow.document.write('</head><body >');\n        mywindow.document.write(content);\n        mywindow.document.write('</body></html>');\n\n        mywindow.document.close();\n        mywindow.focus()\n        mywindow.print();\n        mywindow.close();\n        return true;\n      },\n\n      async onFileChange(e) {\n        var files = e.target.files || e.dataTransfer.files;\n        if (!files.length)\n          return;\n        let res = await helpers.createInput(files[0]);\n        res = JSON.parse(res)\n        \n        this.companies = groupBy(res, 'Project')\n        this.companies = Object.entries(this.companies)\n        this.companies.splice(this.companies.length - 1, 1)\n        this.companies.map((company) => {\n          let totalCost = 0\n          for (let index = 0; index < company[1].length; index++) {\n            company[1][index][\"Total Time\"] = parseInt(company[1][index]['End Time'], 10) - parseInt(company[1][index]['Start Time'], 10)\n            company[1][index][\"Cost\"] = parseInt(company[1][index][\"Total Time\"], 10) * parseInt(company[1][index]['Billable Rate (per hour)'], 10)\n            totalCost += company[1][index][\"Cost\"]\n          }\n          company[2] = totalCost\n        })\n      }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}